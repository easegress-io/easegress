// Code generated by protoc-gen-go. DO NOT EDIT.
// source: meshmodel.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Tenant is the logic group of mesh services. Inside the same tenant,
// services can visit each other directly. There are two kinds of tenant, one is the  common type
// of tenants and the other is system reserved "global" tenant which's access scope is globally
// inside the mesh . If one mesh service is created with "global" tenant filed, it can be visible
// to all the service inside the mesh.
type Tenant struct {
	// Name is the identify of this tenant.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Services are the array of mesh service name in this tenant.
	Services []string `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	// Descriptions for this tenant.
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tenant) Reset()         { *m = Tenant{} }
func (m *Tenant) String() string { return proto.CompactTextString(m) }
func (*Tenant) ProtoMessage()    {}
func (*Tenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{0}
}

func (m *Tenant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tenant.Unmarshal(m, b)
}
func (m *Tenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tenant.Marshal(b, m, deterministic)
}
func (m *Tenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tenant.Merge(m, src)
}
func (m *Tenant) XXX_Size() int {
	return xxx_messageInfo_Tenant.Size(m)
}
func (m *Tenant) XXX_DiscardUnknown() {
	xxx_messageInfo_Tenant.DiscardUnknown(m)
}

var xxx_messageInfo_Tenant proto.InternalMessageInfo

func (m *Tenant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tenant) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Tenant) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Service is the basic element in EaseMesh to describe a user's business microservices'
// name, belonging tenant, and governance specs. One service should belongs to a dedicated
// tenant.
type Service struct {
	// Name is the mesh service's name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// RegisterTenant is the tenant's name this service belongs to.
	RegisterTenant string `protobuf:"bytes,2,opt,name=registerTenant,proto3" json:"registerTenant,omitempty"`
	// Resilience configuration, optional.
	Resilience *Resilience `protobuf:"bytes,3,opt,name=resilience,proto3" json:"resilience,omitempty"`
	// Canary configuration, optional.
	Canary *Canary `protobuf:"bytes,4,opt,name=canary,proto3" json:"canary,omitempty"`
	// LoadBalance configuration, optional.
	LoadBalance *LoadBalance `protobuf:"bytes,5,opt,name=loadBalance,proto3" json:"loadBalance,omitempty"`
	// Sidecar configuration, optional.
	Sidecar *Sidecar `protobuf:"bytes,6,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
	// Observability configuration, optional.
	Observability        *Observability `protobuf:"bytes,7,opt,name=observability,proto3" json:"observability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{1}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetRegisterTenant() string {
	if m != nil {
		return m.RegisterTenant
	}
	return ""
}

func (m *Service) GetResilience() *Resilience {
	if m != nil {
		return m.Resilience
	}
	return nil
}

func (m *Service) GetCanary() *Canary {
	if m != nil {
		return m.Canary
	}
	return nil
}

func (m *Service) GetLoadBalance() *LoadBalance {
	if m != nil {
		return m.LoadBalance
	}
	return nil
}

func (m *Service) GetSidecar() *Sidecar {
	if m != nil {
		return m.Sidecar
	}
	return nil
}

func (m *Service) GetObservability() *Observability {
	if m != nil {
		return m.Observability
	}
	return nil
}

// Resilience configures four key types of features, RateLimiter, CircuitBreaker,
// Retryer and Timeout.
type Resilience struct {
	// RateLimiter configuration.
	RateLimiter *RateLimiter `protobuf:"bytes,1,opt,name=rateLimiter,proto3" json:"rateLimiter,omitempty"`
	// CircuitBreaker configuration.
	CircuitBreaker *CircuitBreaker `protobuf:"bytes,2,opt,name=circuitBreaker,proto3" json:"circuitBreaker,omitempty"`
	// Retryer configuration.
	Retryer *Retryer `protobuf:"bytes,3,opt,name=retryer,proto3" json:"retryer,omitempty"`
	// TimeLimiter configuration
	TimeLimiter          *TimeLimiter `protobuf:"bytes,4,opt,name=timeLimiter,proto3" json:"timeLimiter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Resilience) Reset()         { *m = Resilience{} }
func (m *Resilience) String() string { return proto.CompactTextString(m) }
func (*Resilience) ProtoMessage()    {}
func (*Resilience) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{2}
}

func (m *Resilience) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resilience.Unmarshal(m, b)
}
func (m *Resilience) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resilience.Marshal(b, m, deterministic)
}
func (m *Resilience) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resilience.Merge(m, src)
}
func (m *Resilience) XXX_Size() int {
	return xxx_messageInfo_Resilience.Size(m)
}
func (m *Resilience) XXX_DiscardUnknown() {
	xxx_messageInfo_Resilience.DiscardUnknown(m)
}

var xxx_messageInfo_Resilience proto.InternalMessageInfo

func (m *Resilience) GetRateLimiter() *RateLimiter {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *Resilience) GetCircuitBreaker() *CircuitBreaker {
	if m != nil {
		return m.CircuitBreaker
	}
	return nil
}

func (m *Resilience) GetRetryer() *Retryer {
	if m != nil {
		return m.Retryer
	}
	return nil
}

func (m *Resilience) GetTimeLimiter() *TimeLimiter {
	if m != nil {
		return m.TimeLimiter
	}
	return nil
}

// Canary configures rules to implement canary deployment. It belongs to the traffic scheduling domain.
// The developer can deploy a canary version of microservice and accept coloring test its stability before
// rolling out to the whole instances.
type Canary struct {
	// CanaryRules is the mesh service's all rules for canary deployment.
	CanaryRules          []*CanaryRule `protobuf:"bytes,1,rep,name=canaryRules,proto3" json:"canaryRules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Canary) Reset()         { *m = Canary{} }
func (m *Canary) String() string { return proto.CompactTextString(m) }
func (*Canary) ProtoMessage()    {}
func (*Canary) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{3}
}

func (m *Canary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Canary.Unmarshal(m, b)
}
func (m *Canary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Canary.Marshal(b, m, deterministic)
}
func (m *Canary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Canary.Merge(m, src)
}
func (m *Canary) XXX_Size() int {
	return xxx_messageInfo_Canary.Size(m)
}
func (m *Canary) XXX_DiscardUnknown() {
	xxx_messageInfo_Canary.DiscardUnknown(m)
}

var xxx_messageInfo_Canary proto.InternalMessageInfo

func (m *Canary) GetCanaryRules() []*CanaryRule {
	if m != nil {
		return m.CanaryRules
	}
	return nil
}

// Sidecar configures the sidecar for every mesh service instances. It works inside the same
// pod with the workload instance.
type Sidecar struct {
	// DiscoveryType configures the type of service register/discovery type, its value are among
	// "eureka","consul", and "nacos".
	DiscoveryType string `protobuf:"bytes,1,opt,name=discoveryType,proto3" json:"discoveryType,omitempty"`
	// Address is the registry center address for workload to visit.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// IngressPort is the port for ingress traffic.
	IngressPort int32 `protobuf:"varint,3,opt,name=ingressPort,proto3" json:"ingressPort,omitempty"`
	// IngressProtocol is the protocol for ingress traffic. Its value is "http".
	IngressProtocol string `protobuf:"bytes,4,opt,name=ingressProtocol,proto3" json:"ingressProtocol,omitempty"`
	// EgressPort is the port for egress traffic.
	EgressPort int32 `protobuf:"varint,5,opt,name=egressPort,proto3" json:"egressPort,omitempty"`
	// EgressProtocol is the protocol for egress traffic. Its value is "http"
	EgressProtocol       string   `protobuf:"bytes,6,opt,name=egressProtocol,proto3" json:"egressProtocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sidecar) Reset()         { *m = Sidecar{} }
func (m *Sidecar) String() string { return proto.CompactTextString(m) }
func (*Sidecar) ProtoMessage()    {}
func (*Sidecar) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{4}
}

func (m *Sidecar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sidecar.Unmarshal(m, b)
}
func (m *Sidecar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sidecar.Marshal(b, m, deterministic)
}
func (m *Sidecar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sidecar.Merge(m, src)
}
func (m *Sidecar) XXX_Size() int {
	return xxx_messageInfo_Sidecar.Size(m)
}
func (m *Sidecar) XXX_DiscardUnknown() {
	xxx_messageInfo_Sidecar.DiscardUnknown(m)
}

var xxx_messageInfo_Sidecar proto.InternalMessageInfo

func (m *Sidecar) GetDiscoveryType() string {
	if m != nil {
		return m.DiscoveryType
	}
	return ""
}

func (m *Sidecar) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Sidecar) GetIngressPort() int32 {
	if m != nil {
		return m.IngressPort
	}
	return 0
}

func (m *Sidecar) GetIngressProtocol() string {
	if m != nil {
		return m.IngressProtocol
	}
	return ""
}

func (m *Sidecar) GetEgressPort() int32 {
	if m != nil {
		return m.EgressPort
	}
	return 0
}

func (m *Sidecar) GetEgressProtocol() string {
	if m != nil {
		return m.EgressProtocol
	}
	return ""
}

// LoadBalance configures how to distribute the traffic inside this mesh.
type LoadBalance struct {
	// Policy including four kinds of load balancing scheme, including random, weightedRandom,ipHash,
	// headerHash
	Policy string `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// HeaderHashKey configures the key in HTTP header when the policy is headerHash.
	HeaderHashKey        string   `protobuf:"bytes,2,opt,name=headerHashKey,proto3" json:"headerHashKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadBalance) Reset()         { *m = LoadBalance{} }
func (m *LoadBalance) String() string { return proto.CompactTextString(m) }
func (*LoadBalance) ProtoMessage()    {}
func (*LoadBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{5}
}

func (m *LoadBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadBalance.Unmarshal(m, b)
}
func (m *LoadBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadBalance.Marshal(b, m, deterministic)
}
func (m *LoadBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalance.Merge(m, src)
}
func (m *LoadBalance) XXX_Size() int {
	return xxx_messageInfo_LoadBalance.Size(m)
}
func (m *LoadBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalance.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalance proto.InternalMessageInfo

func (m *LoadBalance) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *LoadBalance) GetHeaderHashKey() string {
	if m != nil {
		return m.HeaderHashKey
	}
	return ""
}

// Observability consists of three components, outputServer, tracing, and metrics.
type Observability struct {
	// OutputServer configures JavaAgent's tracing output target.
	OutputServer *ObservabilityOutputServer `protobuf:"bytes,1,opt,name=outputServer,proto3" json:"outputServer,omitempty"`
	// Tracings configures whether JavaAgent should deal with tracing HTTP header or not.
	Tracings *ObservabilityTracings `protobuf:"bytes,2,opt,name=tracings,proto3" json:"tracings,omitempty"`
	// Metrics configures the metrics JavaAgent should collect.
	Metrics              *ObservabilityMetrics `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Observability) Reset()         { *m = Observability{} }
func (m *Observability) String() string { return proto.CompactTextString(m) }
func (*Observability) ProtoMessage()    {}
func (*Observability) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{6}
}

func (m *Observability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Observability.Unmarshal(m, b)
}
func (m *Observability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Observability.Marshal(b, m, deterministic)
}
func (m *Observability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Observability.Merge(m, src)
}
func (m *Observability) XXX_Size() int {
	return xxx_messageInfo_Observability.Size(m)
}
func (m *Observability) XXX_DiscardUnknown() {
	xxx_messageInfo_Observability.DiscardUnknown(m)
}

var xxx_messageInfo_Observability proto.InternalMessageInfo

func (m *Observability) GetOutputServer() *ObservabilityOutputServer {
	if m != nil {
		return m.OutputServer
	}
	return nil
}

func (m *Observability) GetTracings() *ObservabilityTracings {
	if m != nil {
		return m.Tracings
	}
	return nil
}

func (m *Observability) GetMetrics() *ObservabilityMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Ingress is the spec of mesh ingress.
type Ingress struct {
	// Name is the identify of this ingress.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Rules is an array of ingress routing rules.
	Rules                []*IngressRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Ingress) Reset()         { *m = Ingress{} }
func (m *Ingress) String() string { return proto.CompactTextString(m) }
func (*Ingress) ProtoMessage()    {}
func (*Ingress) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{7}
}

func (m *Ingress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ingress.Unmarshal(m, b)
}
func (m *Ingress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ingress.Marshal(b, m, deterministic)
}
func (m *Ingress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ingress.Merge(m, src)
}
func (m *Ingress) XXX_Size() int {
	return xxx_messageInfo_Ingress.Size(m)
}
func (m *Ingress) XXX_DiscardUnknown() {
	xxx_messageInfo_Ingress.DiscardUnknown(m)
}

var xxx_messageInfo_Ingress proto.InternalMessageInfo

func (m *Ingress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ingress) GetRules() []*IngressRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// ServiceInstance is the runnable entity of a Mesh Service.
type ServiceInstance struct {
	// ServiceName is the name of service this instance belongs to.
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	// InstanceID is the identity of this instance.
	InstanceID string `protobuf:"bytes,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	// IP is this instance's address in EaseMesh.
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// Port is the port this instance listening to.
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// RegistryTime is the time this instance registered.
	RegistryTime string `protobuf:"bytes,5,opt,name=registryTime,proto3" json:"registryTime,omitempty"`
	// Labels is a map for storing service labels. This field is used for Canary Deployment.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Status is the status of this mesh service instance.
	Status               string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceInstance) Reset()         { *m = ServiceInstance{} }
func (m *ServiceInstance) String() string { return proto.CompactTextString(m) }
func (*ServiceInstance) ProtoMessage()    {}
func (*ServiceInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{8}
}

func (m *ServiceInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInstance.Unmarshal(m, b)
}
func (m *ServiceInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInstance.Marshal(b, m, deterministic)
}
func (m *ServiceInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInstance.Merge(m, src)
}
func (m *ServiceInstance) XXX_Size() int {
	return xxx_messageInfo_ServiceInstance.Size(m)
}
func (m *ServiceInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInstance.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInstance proto.InternalMessageInfo

func (m *ServiceInstance) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceInstance) GetInstanceID() string {
	if m != nil {
		return m.InstanceID
	}
	return ""
}

func (m *ServiceInstance) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ServiceInstance) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServiceInstance) GetRegistryTime() string {
	if m != nil {
		return m.RegistryTime
	}
	return ""
}

func (m *ServiceInstance) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ServiceInstance) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// RateLimiter configures a limiter which can establish your services' high availability and reliability,
// also it can be used for scaling APIs. RateLimiter can protect servers from overwhelm by the peak traffic.
type RateLimiter struct {
	// Policies contains different limiting configurations for this RateLimiter to use.
	Policies []*RateLimiterPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// DefaultPolicyRef is the default reference policy name.
	DefaultPolicyRef string `protobuf:"bytes,2,opt,name=defaultPolicyRef,proto3" json:"defaultPolicyRef,omitempty"`
	// Urls describe the HTTP request matching schemes for this limiter to filter.
	Urls                 []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RateLimiter) Reset()         { *m = RateLimiter{} }
func (m *RateLimiter) String() string { return proto.CompactTextString(m) }
func (*RateLimiter) ProtoMessage()    {}
func (*RateLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{9}
}

func (m *RateLimiter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimiter.Unmarshal(m, b)
}
func (m *RateLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimiter.Marshal(b, m, deterministic)
}
func (m *RateLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimiter.Merge(m, src)
}
func (m *RateLimiter) XXX_Size() int {
	return xxx_messageInfo_RateLimiter.Size(m)
}
func (m *RateLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimiter proto.InternalMessageInfo

func (m *RateLimiter) GetPolicies() []*RateLimiterPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *RateLimiter) GetDefaultPolicyRef() string {
	if m != nil {
		return m.DefaultPolicyRef
	}
	return ""
}

func (m *RateLimiter) GetUrls() []*URLRule {
	if m != nil {
		return m.Urls
	}
	return nil
}

// CircuitBreaker is used for blocking all in-coming requests when the the failure numbers
// reach the configured limitation. You can declare an CircuitBreaker with COUNT_BASED or
// TIME_BASED type.  It has three types of states, open, closed and half-close. One service
// can declare its desired CircuitBreaker, and the upstream clients will active the same CircuitBreaker
// locally when calling this service.
type CircuitBreaker struct {
	// Policies contain different breaker configurations for this CircuitBreaker to use.
	Policies []*CircuitBreakerPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// DefaultPolicyRef is the default reference policy name.
	DefaultPolicyRef string `protobuf:"bytes,2,opt,name=defaultPolicyRef,proto3" json:"defaultPolicyRef,omitempty"`
	// URLs describe the HTTP request matching schemes for this limiter to filter.
	Urls                 []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CircuitBreaker) Reset()         { *m = CircuitBreaker{} }
func (m *CircuitBreaker) String() string { return proto.CompactTextString(m) }
func (*CircuitBreaker) ProtoMessage()    {}
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{10}
}

func (m *CircuitBreaker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreaker.Unmarshal(m, b)
}
func (m *CircuitBreaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreaker.Marshal(b, m, deterministic)
}
func (m *CircuitBreaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreaker.Merge(m, src)
}
func (m *CircuitBreaker) XXX_Size() int {
	return xxx_messageInfo_CircuitBreaker.Size(m)
}
func (m *CircuitBreaker) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreaker.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreaker proto.InternalMessageInfo

func (m *CircuitBreaker) GetPolicies() []*CircuitBreakerPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *CircuitBreaker) GetDefaultPolicyRef() string {
	if m != nil {
		return m.DefaultPolicyRef
	}
	return ""
}

func (m *CircuitBreaker) GetUrls() []*URLRule {
	if m != nil {
		return m.Urls
	}
	return nil
}

// Retryer can perform an API calling retry when the service HTTP response code indicated its in
// temporary unavailable states. The up-stream client should make sure this API is idempotent.
// The service can declare an Retryer for its desired APIs and active in client side.
type Retryer struct {
	// Policies contain different retryer configurations for this Retryer to use.
	Policies []*RetryerPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// DefaultPolicyRef is the default reference policy name.
	DefaultPolicyRef string `protobuf:"bytes,2,opt,name=defaultPolicyRef,proto3" json:"defaultPolicyRef,omitempty"`
	// Urls describe the HTTP request matching schemes for this limiter to filter.
	Urls                 []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Retryer) Reset()         { *m = Retryer{} }
func (m *Retryer) String() string { return proto.CompactTextString(m) }
func (*Retryer) ProtoMessage()    {}
func (*Retryer) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{11}
}

func (m *Retryer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Retryer.Unmarshal(m, b)
}
func (m *Retryer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Retryer.Marshal(b, m, deterministic)
}
func (m *Retryer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Retryer.Merge(m, src)
}
func (m *Retryer) XXX_Size() int {
	return xxx_messageInfo_Retryer.Size(m)
}
func (m *Retryer) XXX_DiscardUnknown() {
	xxx_messageInfo_Retryer.DiscardUnknown(m)
}

var xxx_messageInfo_Retryer proto.InternalMessageInfo

func (m *Retryer) GetPolicies() []*RetryerPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *Retryer) GetDefaultPolicyRef() string {
	if m != nil {
		return m.DefaultPolicyRef
	}
	return ""
}

func (m *Retryer) GetUrls() []*URLRule {
	if m != nil {
		return m.Urls
	}
	return nil
}

// Timeout configures the amount of time the client should wait for replies from a given service,
// it will be running in upstream clients and declared in downstream relied services.
type TimeLimiter struct {
	// DefaultTimeoutDuration configures the default duration for timeout, e.g.,500ms.
	DefaultTimeoutDuration string `protobuf:"bytes,1,opt,name=defaultTimeoutDuration,proto3" json:"defaultTimeoutDuration,omitempty"`
	// Urls describe the HTTP request matching schemes for this limiter to filter.
	Urls                 []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TimeLimiter) Reset()         { *m = TimeLimiter{} }
func (m *TimeLimiter) String() string { return proto.CompactTextString(m) }
func (*TimeLimiter) ProtoMessage()    {}
func (*TimeLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{12}
}

func (m *TimeLimiter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeLimiter.Unmarshal(m, b)
}
func (m *TimeLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeLimiter.Marshal(b, m, deterministic)
}
func (m *TimeLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeLimiter.Merge(m, src)
}
func (m *TimeLimiter) XXX_Size() int {
	return xxx_messageInfo_TimeLimiter.Size(m)
}
func (m *TimeLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_TimeLimiter proto.InternalMessageInfo

func (m *TimeLimiter) GetDefaultTimeoutDuration() string {
	if m != nil {
		return m.DefaultTimeoutDuration
	}
	return ""
}

func (m *TimeLimiter) GetUrls() []*URLRule {
	if m != nil {
		return m.Urls
	}
	return nil
}

// CircuitBreakerPolicy is the policy for describing Resilience component CircuitBreaker.
// It contains the basic configurations for the breaker, including the type of sliding window this
// breaker will use. Whether including network error or not and so on.
type CircuitBreakerPolicy struct {
	//  Name is the identify of this policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// SlidingWindowType is the sliding window type of this break, only "COUNT_BASED" or "TIME_BASED" allowed.
	SlidingWindowType string `protobuf:"bytes,2,opt,name=slidingWindowType,proto3" json:"slidingWindowType,omitempty"`
	// FailureRateThreshold configures the failure rate threshold in percentage. When the failure rate is equal
	// or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls.
	FailureRateThreshold uint32 `protobuf:"varint,3,opt,name=failureRateThreshold,proto3" json:"failureRateThreshold,omitempty"`
	// SlowCallRateThreshold Configures a threshold in percentage. The CircuitBreaker considers a call as slow
	// when the call duration is greater than slowCallDurationThreshold When the percentage of slow calls is
	// equal or greater the threshold, the CircuitBreaker transitions to open and starts short-circuiting calls.
	SlowCallRateThreshold uint32 `protobuf:"varint,4,opt,name=slowCallRateThreshold,proto3" json:"slowCallRateThreshold,omitempty"`
	// CountingNetworkError configures whether a network failure situation should active CircuitBreaker or not. .
	CountingNetworkError bool `protobuf:"varint,5,opt,name=countingNetworkError,proto3" json:"countingNetworkError,omitempty"`
	// SlidingWindowSize configures the size of the sliding window which is used to record the outcome of
	// calls when the CircuitBreaker is closed.
	SlidingWindowSize uint32 `protobuf:"varint,6,opt,name=slidingWindowSize,proto3" json:"slidingWindowSize,omitempty"`
	// PermittedNumberOfCallsInHalfOpenState configures the number of permitted calls when the CircuitBreaker
	// is half open.
	PermittedNumberOfCallsInHalfOpenState uint32 `protobuf:"varint,7,opt,name=permittedNumberOfCallsInHalfOpenState,proto3" json:"permittedNumberOfCallsInHalfOpenState,omitempty"`
	// MinimumNumberOfCalls configures the minimum number of calls which are required (per sliding window period)
	// before the CircuitBreaker can calculate the error rate or slow call rate.  For example,
	// if minimumNumberOfCalls is 10, then at least 10 calls must be recorded, before the failure rate can be
	// calculated. If only 9 calls have been recorded the CircuitBreaker will not transition to open
	// even if all 9 calls have failed.
	MinimumNumberOfCalls uint32 `protobuf:"varint,8,opt,name=minimumNumberOfCalls,proto3" json:"minimumNumberOfCalls,omitempty"`
	// SlowCallDurationThreshold configures the duration threshold above which calls are considered as slow
	// and increase the rate of slow calls.
	SlowCallDurationThreshold string `protobuf:"bytes,9,opt,name=slowCallDurationThreshold,proto3" json:"slowCallDurationThreshold,omitempty"`
	// MaxWaitDurationInHalfOpenState configures a maximum wait duration which controls the longest amount
	// of time a CircuitBreaker could stay in Half Open state, before it switches to open. Value 0 means
	// Circuit Breaker would wait infinitely in HalfOpen State until all permitted calls have been completed.
	MaxWaitDurationInHalfOpenState string `protobuf:"bytes,10,opt,name=maxWaitDurationInHalfOpenState,proto3" json:"maxWaitDurationInHalfOpenState,omitempty"`
	// WaitDurationInOpenState configures the duration that the CircuitBreaker should wait before transitioning
	// from open to half-open,e.g.,60000ms.
	WaitDurationInOpenState string `protobuf:"bytes,11,opt,name=waitDurationInOpenState,proto3" json:"waitDurationInOpenState,omitempty"`
	// FailureStatusCodes is the array for HTTP failure status code for this CircuitBreakerPolicy.
	FailureStatusCodes   []int32  `protobuf:"varint,12,rep,packed,name=failureStatusCodes,proto3" json:"failureStatusCodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CircuitBreakerPolicy) Reset()         { *m = CircuitBreakerPolicy{} }
func (m *CircuitBreakerPolicy) String() string { return proto.CompactTextString(m) }
func (*CircuitBreakerPolicy) ProtoMessage()    {}
func (*CircuitBreakerPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{13}
}

func (m *CircuitBreakerPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreakerPolicy.Unmarshal(m, b)
}
func (m *CircuitBreakerPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreakerPolicy.Marshal(b, m, deterministic)
}
func (m *CircuitBreakerPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreakerPolicy.Merge(m, src)
}
func (m *CircuitBreakerPolicy) XXX_Size() int {
	return xxx_messageInfo_CircuitBreakerPolicy.Size(m)
}
func (m *CircuitBreakerPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreakerPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreakerPolicy proto.InternalMessageInfo

func (m *CircuitBreakerPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CircuitBreakerPolicy) GetSlidingWindowType() string {
	if m != nil {
		return m.SlidingWindowType
	}
	return ""
}

func (m *CircuitBreakerPolicy) GetFailureRateThreshold() uint32 {
	if m != nil {
		return m.FailureRateThreshold
	}
	return 0
}

func (m *CircuitBreakerPolicy) GetSlowCallRateThreshold() uint32 {
	if m != nil {
		return m.SlowCallRateThreshold
	}
	return 0
}

func (m *CircuitBreakerPolicy) GetCountingNetworkError() bool {
	if m != nil {
		return m.CountingNetworkError
	}
	return false
}

func (m *CircuitBreakerPolicy) GetSlidingWindowSize() uint32 {
	if m != nil {
		return m.SlidingWindowSize
	}
	return 0
}

func (m *CircuitBreakerPolicy) GetPermittedNumberOfCallsInHalfOpenState() uint32 {
	if m != nil {
		return m.PermittedNumberOfCallsInHalfOpenState
	}
	return 0
}

func (m *CircuitBreakerPolicy) GetMinimumNumberOfCalls() uint32 {
	if m != nil {
		return m.MinimumNumberOfCalls
	}
	return 0
}

func (m *CircuitBreakerPolicy) GetSlowCallDurationThreshold() string {
	if m != nil {
		return m.SlowCallDurationThreshold
	}
	return ""
}

func (m *CircuitBreakerPolicy) GetMaxWaitDurationInHalfOpenState() string {
	if m != nil {
		return m.MaxWaitDurationInHalfOpenState
	}
	return ""
}

func (m *CircuitBreakerPolicy) GetWaitDurationInOpenState() string {
	if m != nil {
		return m.WaitDurationInOpenState
	}
	return ""
}

func (m *CircuitBreakerPolicy) GetFailureStatusCodes() []int32 {
	if m != nil {
		return m.FailureStatusCodes
	}
	return nil
}

// RetryerPolicy configures the policy for describing Resilience component Retryer.
// It contains the basic configurations for the retryer, including the type of sliding window this
// breaker will use. Whether including network error or not and so on.
type RetryerPolicy struct {
	// Name is the identify of this policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MaxAttempts configures the maximum number of attempts. (including the initial call as the first attempt)
	MaxAttempts int32 `protobuf:"varint,2,opt,name=maxAttempts,proto3" json:"maxAttempts,omitempty"`
	// WaitDuration configures the based and fixed wait duration between retry attempts.
	WaitDuration string `protobuf:"bytes,3,opt,name=waitDuration,proto3" json:"waitDuration,omitempty"`
	// BackOffPolicy configures the two kinds of policy, random and exponential.
	BackOffPolicy string `protobuf:"bytes,4,opt,name=backOffPolicy,proto3" json:"backOffPolicy,omitempty"`
	// RandomizationFactor configures the factor used for backoff, value between 0 and 1.
	RandomizationFactor float64 `protobuf:"fixed64,5,opt,name=randomizationFactor,proto3" json:"randomizationFactor,omitempty"`
	// CountingNetworkError configures whether a network failure situation should retry or not.
	CountingNetworkError bool `protobuf:"varint,6,opt,name=countingNetworkError,proto3" json:"countingNetworkError,omitempty"`
	// FailureStatusCodes is the array for HTTP failure status code for this RetryPolicy.
	FailureStatusCodes   []int32  `protobuf:"varint,7,rep,packed,name=failureStatusCodes,proto3" json:"failureStatusCodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetryerPolicy) Reset()         { *m = RetryerPolicy{} }
func (m *RetryerPolicy) String() string { return proto.CompactTextString(m) }
func (*RetryerPolicy) ProtoMessage()    {}
func (*RetryerPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{14}
}

func (m *RetryerPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetryerPolicy.Unmarshal(m, b)
}
func (m *RetryerPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetryerPolicy.Marshal(b, m, deterministic)
}
func (m *RetryerPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryerPolicy.Merge(m, src)
}
func (m *RetryerPolicy) XXX_Size() int {
	return xxx_messageInfo_RetryerPolicy.Size(m)
}
func (m *RetryerPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryerPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RetryerPolicy proto.InternalMessageInfo

func (m *RetryerPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetryerPolicy) GetMaxAttempts() int32 {
	if m != nil {
		return m.MaxAttempts
	}
	return 0
}

func (m *RetryerPolicy) GetWaitDuration() string {
	if m != nil {
		return m.WaitDuration
	}
	return ""
}

func (m *RetryerPolicy) GetBackOffPolicy() string {
	if m != nil {
		return m.BackOffPolicy
	}
	return ""
}

func (m *RetryerPolicy) GetRandomizationFactor() float64 {
	if m != nil {
		return m.RandomizationFactor
	}
	return 0
}

func (m *RetryerPolicy) GetCountingNetworkError() bool {
	if m != nil {
		return m.CountingNetworkError
	}
	return false
}

func (m *RetryerPolicy) GetFailureStatusCodes() []int32 {
	if m != nil {
		return m.FailureStatusCodes
	}
	return nil
}

// RateLimiterPolicy configures the limiting policy used for Resilience component RateLimiter.
// It contains the basic configurations for the limiter, including the permission number,
// the duration for request waiting and the permission count refreshing period.
type RateLimiterPolicy struct {
	// Name is the identify of this policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TimeoutDuration is the duration for one request should wait for a permission,e.g.,500ms.
	TimeoutDuration string `protobuf:"bytes,2,opt,name=timeoutDuration,proto3" json:"timeoutDuration,omitempty"`
	// LimitRefreshPeriod is the period of a limit refresh. After each period the rate limiter sets
	// its permissions count back to the limitForPeriod value.
	LimitRefreshPeriod string `protobuf:"bytes,3,opt,name=limitRefreshPeriod,proto3" json:"limitRefreshPeriod,omitempty"`
	// LimitForPeriod is the number of permissions available during one limit refresh period.
	LimitForPeriod       int32    `protobuf:"varint,4,opt,name=limitForPeriod,proto3" json:"limitForPeriod,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RateLimiterPolicy) Reset()         { *m = RateLimiterPolicy{} }
func (m *RateLimiterPolicy) String() string { return proto.CompactTextString(m) }
func (*RateLimiterPolicy) ProtoMessage()    {}
func (*RateLimiterPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{15}
}

func (m *RateLimiterPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimiterPolicy.Unmarshal(m, b)
}
func (m *RateLimiterPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimiterPolicy.Marshal(b, m, deterministic)
}
func (m *RateLimiterPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimiterPolicy.Merge(m, src)
}
func (m *RateLimiterPolicy) XXX_Size() int {
	return xxx_messageInfo_RateLimiterPolicy.Size(m)
}
func (m *RateLimiterPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimiterPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimiterPolicy proto.InternalMessageInfo

func (m *RateLimiterPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RateLimiterPolicy) GetTimeoutDuration() string {
	if m != nil {
		return m.TimeoutDuration
	}
	return ""
}

func (m *RateLimiterPolicy) GetLimitRefreshPeriod() string {
	if m != nil {
		return m.LimitRefreshPeriod
	}
	return ""
}

func (m *RateLimiterPolicy) GetLimitForPeriod() int32 {
	if m != nil {
		return m.LimitForPeriod
	}
	return 0
}

// CanaryRule define the rule for canary deployment. Including service instances labels,
// how to match colored traffic, which traffic is considered as coloring.
type CanaryRule struct {
	// ServiceInstanceLabels configure the labels patched into the service instances.
	// Registry center will label it to corresponding instances during deployment. It's optional.
	// It indicates the canary target service instances. The relation between elements in this map is "OR".
	ServiceInstanceLabels map[string]string `protobuf:"bytes,1,rep,name=serviceInstanceLabels,proto3" json:"serviceInstanceLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Headers configure HTTP requests matching configurations with "OR" relation. Once
	// HTTP requests match one element in this array, it will be regarded as the colored traffic.
	Headers map[string]*StringMatch `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Urls describe the HTTP request matching schemes for this canary rule.
	Urls                 []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CanaryRule) Reset()         { *m = CanaryRule{} }
func (m *CanaryRule) String() string { return proto.CompactTextString(m) }
func (*CanaryRule) ProtoMessage()    {}
func (*CanaryRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{16}
}

func (m *CanaryRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CanaryRule.Unmarshal(m, b)
}
func (m *CanaryRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CanaryRule.Marshal(b, m, deterministic)
}
func (m *CanaryRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanaryRule.Merge(m, src)
}
func (m *CanaryRule) XXX_Size() int {
	return xxx_messageInfo_CanaryRule.Size(m)
}
func (m *CanaryRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CanaryRule.DiscardUnknown(m)
}

var xxx_messageInfo_CanaryRule proto.InternalMessageInfo

func (m *CanaryRule) GetServiceInstanceLabels() map[string]string {
	if m != nil {
		return m.ServiceInstanceLabels
	}
	return nil
}

func (m *CanaryRule) GetHeaders() map[string]*StringMatch {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *CanaryRule) GetUrls() []*URLRule {
	if m != nil {
		return m.Urls
	}
	return nil
}

// ObservabilityOutputServer configures how to report observability data to Kafka.
type ObservabilityOutputServer struct {
	// Enabled configures whether reporting observability data to Kafka or not.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// BootstrapServer configures the Kafka bootstrap servers.
	BootstrapServer string `protobuf:"bytes,2,opt,name=bootstrapServer,proto3" json:"bootstrapServer,omitempty"`
	// Timeout configures the timeout million second for requesting Kafka.
	Timeout              int32    `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObservabilityOutputServer) Reset()         { *m = ObservabilityOutputServer{} }
func (m *ObservabilityOutputServer) String() string { return proto.CompactTextString(m) }
func (*ObservabilityOutputServer) ProtoMessage()    {}
func (*ObservabilityOutputServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{17}
}

func (m *ObservabilityOutputServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservabilityOutputServer.Unmarshal(m, b)
}
func (m *ObservabilityOutputServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservabilityOutputServer.Marshal(b, m, deterministic)
}
func (m *ObservabilityOutputServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservabilityOutputServer.Merge(m, src)
}
func (m *ObservabilityOutputServer) XXX_Size() int {
	return xxx_messageInfo_ObservabilityOutputServer.Size(m)
}
func (m *ObservabilityOutputServer) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservabilityOutputServer.DiscardUnknown(m)
}

var xxx_messageInfo_ObservabilityOutputServer proto.InternalMessageInfo

func (m *ObservabilityOutputServer) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ObservabilityOutputServer) GetBootstrapServer() string {
	if m != nil {
		return m.BootstrapServer
	}
	return ""
}

func (m *ObservabilityOutputServer) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// ObservabilityTracingsDetail
type ObservabilityTracingsDetail struct {
	// Enabled configures whether reporting this tracing component or not.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// ServicePrefix is used to be combined with the tracing component's.
	ServicePrefix        string   `protobuf:"bytes,2,opt,name=servicePrefix,proto3" json:"servicePrefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObservabilityTracingsDetail) Reset()         { *m = ObservabilityTracingsDetail{} }
func (m *ObservabilityTracingsDetail) String() string { return proto.CompactTextString(m) }
func (*ObservabilityTracingsDetail) ProtoMessage()    {}
func (*ObservabilityTracingsDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{18}
}

func (m *ObservabilityTracingsDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservabilityTracingsDetail.Unmarshal(m, b)
}
func (m *ObservabilityTracingsDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservabilityTracingsDetail.Marshal(b, m, deterministic)
}
func (m *ObservabilityTracingsDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservabilityTracingsDetail.Merge(m, src)
}
func (m *ObservabilityTracingsDetail) XXX_Size() int {
	return xxx_messageInfo_ObservabilityTracingsDetail.Size(m)
}
func (m *ObservabilityTracingsDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservabilityTracingsDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ObservabilityTracingsDetail proto.InternalMessageInfo

func (m *ObservabilityTracingsDetail) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ObservabilityTracingsDetail) GetServicePrefix() string {
	if m != nil {
		return m.ServicePrefix
	}
	return ""
}

type ObservabilityTracingsOutputConfig struct {
	// Enabled configures whether reporting to tracing output or not.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// ReportThread configures the thread number for JavaAgent's reporting process.
	ReportThread int32 `protobuf:"varint,2,opt,name=reportThread,proto3" json:"reportThread,omitempty"`
	// Topic configures the Kafka topic for tracing output target.
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// MessageMaxBytes configures the max bytes for one tracing report message.
	MessageMaxBytes int32 `protobuf:"varint,4,opt,name=messageMaxBytes,proto3" json:"messageMaxBytes,omitempty"`
	// QueuedMaxSpans configures the max spans number for reporting queued.
	QueuedMaxSpans int32 `protobuf:"varint,5,opt,name=queuedMaxSpans,proto3" json:"queuedMaxSpans,omitempty"`
	// QueuedMaxSize configures the max size of reporting queue.
	QueuedMaxSize int32 `protobuf:"varint,6,opt,name=queuedMaxSize,proto3" json:"queuedMaxSize,omitempty"`
	// MessageTimeout configures the timeout for the message queue.
	MessageTimeout       int32    `protobuf:"varint,7,opt,name=messageTimeout,proto3" json:"messageTimeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObservabilityTracingsOutputConfig) Reset()         { *m = ObservabilityTracingsOutputConfig{} }
func (m *ObservabilityTracingsOutputConfig) String() string { return proto.CompactTextString(m) }
func (*ObservabilityTracingsOutputConfig) ProtoMessage()    {}
func (*ObservabilityTracingsOutputConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{19}
}

func (m *ObservabilityTracingsOutputConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservabilityTracingsOutputConfig.Unmarshal(m, b)
}
func (m *ObservabilityTracingsOutputConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservabilityTracingsOutputConfig.Marshal(b, m, deterministic)
}
func (m *ObservabilityTracingsOutputConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservabilityTracingsOutputConfig.Merge(m, src)
}
func (m *ObservabilityTracingsOutputConfig) XXX_Size() int {
	return xxx_messageInfo_ObservabilityTracingsOutputConfig.Size(m)
}
func (m *ObservabilityTracingsOutputConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservabilityTracingsOutputConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ObservabilityTracingsOutputConfig proto.InternalMessageInfo

func (m *ObservabilityTracingsOutputConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ObservabilityTracingsOutputConfig) GetReportThread() int32 {
	if m != nil {
		return m.ReportThread
	}
	return 0
}

func (m *ObservabilityTracingsOutputConfig) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ObservabilityTracingsOutputConfig) GetMessageMaxBytes() int32 {
	if m != nil {
		return m.MessageMaxBytes
	}
	return 0
}

func (m *ObservabilityTracingsOutputConfig) GetQueuedMaxSpans() int32 {
	if m != nil {
		return m.QueuedMaxSpans
	}
	return 0
}

func (m *ObservabilityTracingsOutputConfig) GetQueuedMaxSize() int32 {
	if m != nil {
		return m.QueuedMaxSize
	}
	return 0
}

func (m *ObservabilityTracingsOutputConfig) GetMessageTimeout() int32 {
	if m != nil {
		return m.MessageTimeout
	}
	return 0
}

// ObservabilityTracings configure the tracings of observability.
type ObservabilityTracings struct {
	// Enable configures this mesh service's global tracing switch.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// SampleByQPS configures the QPS value for tracing sampling.
	// The exceeded request will be ignored.
	SampleByQPS int32 `protobuf:"varint,2,opt,name=sampleByQPS,proto3" json:"sampleByQPS,omitempty"`
	// Output configures the tracing output topic, queue and thread.
	Output *ObservabilityTracingsOutputConfig `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	// Request configures the tracing switch for this mesh service's HTTP APIs.
	Request *ObservabilityTracingsDetail `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	// RemoteInvoke configures the tracing switch for this mesh service's HTTP RPC tracing.
	RemoteInvoke *ObservabilityTracingsDetail `protobuf:"bytes,5,opt,name=remoteInvoke,proto3" json:"remoteInvoke,omitempty"`
	// Kafka configures the tracing switch for this mesh service's Kafka requesting.
	Kafka *ObservabilityTracingsDetail `protobuf:"bytes,6,opt,name=kafka,proto3" json:"kafka,omitempty"`
	// Jdbc configures the tracing switch for this mesh serivce's JDBC requesting.
	Jdbc *ObservabilityTracingsDetail `protobuf:"bytes,7,opt,name=jdbc,proto3" json:"jdbc,omitempty"`
	// Redis configures the tracing switch for this mehs services's redis requesting.
	Redis *ObservabilityTracingsDetail `protobuf:"bytes,8,opt,name=redis,proto3" json:"redis,omitempty"`
	// Rabbit configures the tracing switch for this mesh service's rabbitMQ requesting.
	Rabbit               *ObservabilityTracingsDetail `protobuf:"bytes,9,opt,name=rabbit,proto3" json:"rabbit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ObservabilityTracings) Reset()         { *m = ObservabilityTracings{} }
func (m *ObservabilityTracings) String() string { return proto.CompactTextString(m) }
func (*ObservabilityTracings) ProtoMessage()    {}
func (*ObservabilityTracings) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{20}
}

func (m *ObservabilityTracings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservabilityTracings.Unmarshal(m, b)
}
func (m *ObservabilityTracings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservabilityTracings.Marshal(b, m, deterministic)
}
func (m *ObservabilityTracings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservabilityTracings.Merge(m, src)
}
func (m *ObservabilityTracings) XXX_Size() int {
	return xxx_messageInfo_ObservabilityTracings.Size(m)
}
func (m *ObservabilityTracings) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservabilityTracings.DiscardUnknown(m)
}

var xxx_messageInfo_ObservabilityTracings proto.InternalMessageInfo

func (m *ObservabilityTracings) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ObservabilityTracings) GetSampleByQPS() int32 {
	if m != nil {
		return m.SampleByQPS
	}
	return 0
}

func (m *ObservabilityTracings) GetOutput() *ObservabilityTracingsOutputConfig {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ObservabilityTracings) GetRequest() *ObservabilityTracingsDetail {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ObservabilityTracings) GetRemoteInvoke() *ObservabilityTracingsDetail {
	if m != nil {
		return m.RemoteInvoke
	}
	return nil
}

func (m *ObservabilityTracings) GetKafka() *ObservabilityTracingsDetail {
	if m != nil {
		return m.Kafka
	}
	return nil
}

func (m *ObservabilityTracings) GetJdbc() *ObservabilityTracingsDetail {
	if m != nil {
		return m.Jdbc
	}
	return nil
}

func (m *ObservabilityTracings) GetRedis() *ObservabilityTracingsDetail {
	if m != nil {
		return m.Redis
	}
	return nil
}

func (m *ObservabilityTracings) GetRabbit() *ObservabilityTracingsDetail {
	if m != nil {
		return m.Rabbit
	}
	return nil
}

// ObservabilityMetricsDetail is the metrics detail of observability.
type ObservabilityMetricsDetail struct {
	// Enabled configures the switch for one kind metric.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Interval configures the million seconds for metric reporting.
	Interval int32 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// Topic configures the metrics' reporting Kafka topic.
	Topic                string   `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObservabilityMetricsDetail) Reset()         { *m = ObservabilityMetricsDetail{} }
func (m *ObservabilityMetricsDetail) String() string { return proto.CompactTextString(m) }
func (*ObservabilityMetricsDetail) ProtoMessage()    {}
func (*ObservabilityMetricsDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{21}
}

func (m *ObservabilityMetricsDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservabilityMetricsDetail.Unmarshal(m, b)
}
func (m *ObservabilityMetricsDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservabilityMetricsDetail.Marshal(b, m, deterministic)
}
func (m *ObservabilityMetricsDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservabilityMetricsDetail.Merge(m, src)
}
func (m *ObservabilityMetricsDetail) XXX_Size() int {
	return xxx_messageInfo_ObservabilityMetricsDetail.Size(m)
}
func (m *ObservabilityMetricsDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservabilityMetricsDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ObservabilityMetricsDetail proto.InternalMessageInfo

func (m *ObservabilityMetricsDetail) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ObservabilityMetricsDetail) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *ObservabilityMetricsDetail) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type ObservabilityMetrics struct {
	// Enabled configures the global switch for this mesh service.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Access configures the access log about metrics.
	Access *ObservabilityMetricsDetail `protobuf:"bytes,2,opt,name=access,proto3" json:"access,omitempty"`
	// Request configures this mesh service's HTTP APIs metrics.
	Request *ObservabilityMetricsDetail `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	// JdbcStatement configures this mesh service's JDBC statement metrics.
	JdbcStatement *ObservabilityMetricsDetail `protobuf:"bytes,4,opt,name=jdbcStatement,proto3" json:"jdbcStatement,omitempty"`
	// JdbcConnection configures this mesh service's JDBC connection related metrics.
	JdbcConnection *ObservabilityMetricsDetail `protobuf:"bytes,5,opt,name=jdbcConnection,proto3" json:"jdbcConnection,omitempty"`
	// Rabbit configures this mesh serivce's RabbitMQ requesting metrics.
	Rabbit *ObservabilityMetricsDetail `protobuf:"bytes,6,opt,name=rabbit,proto3" json:"rabbit,omitempty"`
	// Kafka configures this mesh serivce's Kafka requesting metrics.
	Kafka *ObservabilityMetricsDetail `protobuf:"bytes,7,opt,name=kafka,proto3" json:"kafka,omitempty"`
	// Redis configures this mesh serivce's redis requesting metrics.
	Redis *ObservabilityMetricsDetail `protobuf:"bytes,8,opt,name=redis,proto3" json:"redis,omitempty"`
	// JvmGc configures this mesh serivce's JVM GC related metrics.
	JvmGc *ObservabilityMetricsDetail `protobuf:"bytes,9,opt,name=jvmGc,proto3" json:"jvmGc,omitempty"`
	// JvmMemory configures this mesh serivce's JVM memory usage related metrics.
	JvmMemory *ObservabilityMetricsDetail `protobuf:"bytes,10,opt,name=jvmMemory,proto3" json:"jvmMemory,omitempty"`
	// Md5Dictionary configures this serivce's md5Dictionary for reporting complete SQL Sentence and signature.
	Md5Dictionary        *ObservabilityMetricsDetail `protobuf:"bytes,11,opt,name=md5Dictionary,proto3" json:"md5Dictionary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ObservabilityMetrics) Reset()         { *m = ObservabilityMetrics{} }
func (m *ObservabilityMetrics) String() string { return proto.CompactTextString(m) }
func (*ObservabilityMetrics) ProtoMessage()    {}
func (*ObservabilityMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{22}
}

func (m *ObservabilityMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObservabilityMetrics.Unmarshal(m, b)
}
func (m *ObservabilityMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObservabilityMetrics.Marshal(b, m, deterministic)
}
func (m *ObservabilityMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservabilityMetrics.Merge(m, src)
}
func (m *ObservabilityMetrics) XXX_Size() int {
	return xxx_messageInfo_ObservabilityMetrics.Size(m)
}
func (m *ObservabilityMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservabilityMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ObservabilityMetrics proto.InternalMessageInfo

func (m *ObservabilityMetrics) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ObservabilityMetrics) GetAccess() *ObservabilityMetricsDetail {
	if m != nil {
		return m.Access
	}
	return nil
}

func (m *ObservabilityMetrics) GetRequest() *ObservabilityMetricsDetail {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ObservabilityMetrics) GetJdbcStatement() *ObservabilityMetricsDetail {
	if m != nil {
		return m.JdbcStatement
	}
	return nil
}

func (m *ObservabilityMetrics) GetJdbcConnection() *ObservabilityMetricsDetail {
	if m != nil {
		return m.JdbcConnection
	}
	return nil
}

func (m *ObservabilityMetrics) GetRabbit() *ObservabilityMetricsDetail {
	if m != nil {
		return m.Rabbit
	}
	return nil
}

func (m *ObservabilityMetrics) GetKafka() *ObservabilityMetricsDetail {
	if m != nil {
		return m.Kafka
	}
	return nil
}

func (m *ObservabilityMetrics) GetRedis() *ObservabilityMetricsDetail {
	if m != nil {
		return m.Redis
	}
	return nil
}

func (m *ObservabilityMetrics) GetJvmGc() *ObservabilityMetricsDetail {
	if m != nil {
		return m.JvmGc
	}
	return nil
}

func (m *ObservabilityMetrics) GetJvmMemory() *ObservabilityMetricsDetail {
	if m != nil {
		return m.JvmMemory
	}
	return nil
}

func (m *ObservabilityMetrics) GetMd5Dictionary() *ObservabilityMetricsDetail {
	if m != nil {
		return m.Md5Dictionary
	}
	return nil
}

// IngressPath is the path for a mesh ingress rule
type IngressPath struct {
	// Path is a regular expression for matching the target HTTP URL.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// RewriteTarget is a regular expression for rewriting original URL when
	// the HTTP URL path match the Path field.
	RewriteTarget string `protobuf:"bytes,2,opt,name=rewriteTarget,proto3" json:"rewriteTarget,omitempty"`
	// Backend is the mesh service's name.
	Backend              string   `protobuf:"bytes,3,opt,name=backend,proto3" json:"backend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngressPath) Reset()         { *m = IngressPath{} }
func (m *IngressPath) String() string { return proto.CompactTextString(m) }
func (*IngressPath) ProtoMessage()    {}
func (*IngressPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{23}
}

func (m *IngressPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngressPath.Unmarshal(m, b)
}
func (m *IngressPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngressPath.Marshal(b, m, deterministic)
}
func (m *IngressPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressPath.Merge(m, src)
}
func (m *IngressPath) XXX_Size() int {
	return xxx_messageInfo_IngressPath.Size(m)
}
func (m *IngressPath) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressPath.DiscardUnknown(m)
}

var xxx_messageInfo_IngressPath proto.InternalMessageInfo

func (m *IngressPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *IngressPath) GetRewriteTarget() string {
	if m != nil {
		return m.RewriteTarget
	}
	return ""
}

func (m *IngressPath) GetBackend() string {
	if m != nil {
		return m.Backend
	}
	return ""
}

// IngressRule is the rule for mesh ingress.
type IngressRule struct {
	// Host is the RFC3986 defined host name.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Paths is an array for mapping HTTP paths to mesh services.
	Paths                []*IngressPath `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *IngressRule) Reset()         { *m = IngressRule{} }
func (m *IngressRule) String() string { return proto.CompactTextString(m) }
func (*IngressRule) ProtoMessage()    {}
func (*IngressRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{24}
}

func (m *IngressRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngressRule.Unmarshal(m, b)
}
func (m *IngressRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngressRule.Marshal(b, m, deterministic)
}
func (m *IngressRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressRule.Merge(m, src)
}
func (m *IngressRule) XXX_Size() int {
	return xxx_messageInfo_IngressRule.Size(m)
}
func (m *IngressRule) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressRule.DiscardUnknown(m)
}

var xxx_messageInfo_IngressRule proto.InternalMessageInfo

func (m *IngressRule) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *IngressRule) GetPaths() []*IngressPath {
	if m != nil {
		return m.Paths
	}
	return nil
}

// StringMatch configures how to match string in different ways.
// Its priority is according to the field order. StringMatch will try exactly matching firstly,
// then try to check has the same prefix, at last, it will use the regular expression to match the
// string if it's provided
type StringMatch struct {
	// Exact configures the exactly URL value to match.
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3" json:"exact,omitempty"`
	// Prefix configures the prefix for URL to match.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Regex configures the regular expression for URL to match.
	Regex                string   `protobuf:"bytes,3,opt,name=regex,proto3" json:"regex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringMatch) Reset()         { *m = StringMatch{} }
func (m *StringMatch) String() string { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()    {}
func (*StringMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{25}
}

func (m *StringMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMatch.Unmarshal(m, b)
}
func (m *StringMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMatch.Marshal(b, m, deterministic)
}
func (m *StringMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMatch.Merge(m, src)
}
func (m *StringMatch) XXX_Size() int {
	return xxx_messageInfo_StringMatch.Size(m)
}
func (m *StringMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMatch.DiscardUnknown(m)
}

var xxx_messageInfo_StringMatch proto.InternalMessageInfo

func (m *StringMatch) GetExact() string {
	if m != nil {
		return m.Exact
	}
	return ""
}

func (m *StringMatch) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *StringMatch) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

// URLRule can be used to filter HTTP request by using HTTP method and URL.
type URLRule struct {
	// Methods configures allowed HTTP method string, e.g. "GET","DELETE","POST"
	Methods []string `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	// Url configures how to match the HTTP request URL.
	Url *StringMatch `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// PolicyRef configures which policy this URLRule references to.
	PolicyRef            string   `protobuf:"bytes,3,opt,name=policyRef,proto3" json:"policyRef,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URLRule) Reset()         { *m = URLRule{} }
func (m *URLRule) String() string { return proto.CompactTextString(m) }
func (*URLRule) ProtoMessage()    {}
func (*URLRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{26}
}

func (m *URLRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URLRule.Unmarshal(m, b)
}
func (m *URLRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URLRule.Marshal(b, m, deterministic)
}
func (m *URLRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLRule.Merge(m, src)
}
func (m *URLRule) XXX_Size() int {
	return xxx_messageInfo_URLRule.Size(m)
}
func (m *URLRule) XXX_DiscardUnknown() {
	xxx_messageInfo_URLRule.DiscardUnknown(m)
}

var xxx_messageInfo_URLRule proto.InternalMessageInfo

func (m *URLRule) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *URLRule) GetUrl() *StringMatch {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *URLRule) GetPolicyRef() string {
	if m != nil {
		return m.PolicyRef
	}
	return ""
}

// MySQL is the MySQL configuration of a shadow service
type MySQL struct {
	// Uris is the URIs of MySQL servers
	Uris []string `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty"`
	// UserName is user name to connect to MySQL
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	// Password is password to connect to MySQL
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MySQL) Reset()         { *m = MySQL{} }
func (m *MySQL) String() string { return proto.CompactTextString(m) }
func (*MySQL) ProtoMessage()    {}
func (*MySQL) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{27}
}

func (m *MySQL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MySQL.Unmarshal(m, b)
}
func (m *MySQL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MySQL.Marshal(b, m, deterministic)
}
func (m *MySQL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQL.Merge(m, src)
}
func (m *MySQL) XXX_Size() int {
	return xxx_messageInfo_MySQL.Size(m)
}
func (m *MySQL) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQL.DiscardUnknown(m)
}

var xxx_messageInfo_MySQL proto.InternalMessageInfo

func (m *MySQL) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *MySQL) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *MySQL) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Kafka is the Kafka configuration of a shadow service
type Kafka struct {
	// Uris is the URIs of Kafka servers
	Uris                 []string `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kafka) Reset()         { *m = Kafka{} }
func (m *Kafka) String() string { return proto.CompactTextString(m) }
func (*Kafka) ProtoMessage()    {}
func (*Kafka) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{28}
}

func (m *Kafka) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kafka.Unmarshal(m, b)
}
func (m *Kafka) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kafka.Marshal(b, m, deterministic)
}
func (m *Kafka) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kafka.Merge(m, src)
}
func (m *Kafka) XXX_Size() int {
	return xxx_messageInfo_Kafka.Size(m)
}
func (m *Kafka) XXX_DiscardUnknown() {
	xxx_messageInfo_Kafka.DiscardUnknown(m)
}

var xxx_messageInfo_Kafka proto.InternalMessageInfo

func (m *Kafka) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

// Redis is the Redis configuration of a shadow service
type Redis struct {
	// Uris is the URIs of Redis servers
	Uris []string `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty"`
	// UserName is user name to connect to Redis
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	// Password is password to connect to Redis
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Redis) Reset()         { *m = Redis{} }
func (m *Redis) String() string { return proto.CompactTextString(m) }
func (*Redis) ProtoMessage()    {}
func (*Redis) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{29}
}

func (m *Redis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Redis.Unmarshal(m, b)
}
func (m *Redis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Redis.Marshal(b, m, deterministic)
}
func (m *Redis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redis.Merge(m, src)
}
func (m *Redis) XXX_Size() int {
	return xxx_messageInfo_Redis.Size(m)
}
func (m *Redis) XXX_DiscardUnknown() {
	xxx_messageInfo_Redis.DiscardUnknown(m)
}

var xxx_messageInfo_Redis proto.InternalMessageInfo

func (m *Redis) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *Redis) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Redis) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// RabbitMQ is the RabbitMQ configuration of a shadow service
type RabbitMQ struct {
	// Uris is the URIs of RabbitMQ servers
	Uris []string `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty"`
	// UserName is user name to connect to MySQL
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	// Password is password to connect to MySQL
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RabbitMQ) Reset()         { *m = RabbitMQ{} }
func (m *RabbitMQ) String() string { return proto.CompactTextString(m) }
func (*RabbitMQ) ProtoMessage()    {}
func (*RabbitMQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{30}
}

func (m *RabbitMQ) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RabbitMQ.Unmarshal(m, b)
}
func (m *RabbitMQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RabbitMQ.Marshal(b, m, deterministic)
}
func (m *RabbitMQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RabbitMQ.Merge(m, src)
}
func (m *RabbitMQ) XXX_Size() int {
	return xxx_messageInfo_RabbitMQ.Size(m)
}
func (m *RabbitMQ) XXX_DiscardUnknown() {
	xxx_messageInfo_RabbitMQ.DiscardUnknown(m)
}

var xxx_messageInfo_RabbitMQ proto.InternalMessageInfo

func (m *RabbitMQ) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *RabbitMQ) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RabbitMQ) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// ElasticSearch is the ElasticSearch configuration of a shadow service
type ElasticSearch struct {
	// Uris is the URIs of ElasticSearch servers
	Uris []string `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty"`
	// UserName is user name to connect to ElasticSearch
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	// Password is password to connect to ElasticSearch
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ElasticSearch) Reset()         { *m = ElasticSearch{} }
func (m *ElasticSearch) String() string { return proto.CompactTextString(m) }
func (*ElasticSearch) ProtoMessage()    {}
func (*ElasticSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{31}
}

func (m *ElasticSearch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElasticSearch.Unmarshal(m, b)
}
func (m *ElasticSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElasticSearch.Marshal(b, m, deterministic)
}
func (m *ElasticSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElasticSearch.Merge(m, src)
}
func (m *ElasticSearch) XXX_Size() int {
	return xxx_messageInfo_ElasticSearch.Size(m)
}
func (m *ElasticSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ElasticSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ElasticSearch proto.InternalMessageInfo

func (m *ElasticSearch) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *ElasticSearch) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ElasticSearch) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// ShadowService is the configuration of a shadow service
type ShadowService struct {
	// Name is the name of the shadow service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ServiceName is the name of the service which was shadowed
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	// Namespace is the namespace the service belongs to
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Service is the configuration of the shadowed service
	Service *Service `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	// MySQL is the MySQL configuration of a shadow service
	Mysql *MySQL `protobuf:"bytes,5,opt,name=mysql,proto3" json:"mysql,omitempty"`
	// Kafka is the Kafka configuration of a shadow service
	Kafka *Kafka `protobuf:"bytes,6,opt,name=kafka,proto3" json:"kafka,omitempty"`
	// Redis is the Redis configuration of a shadow service
	Redis *Redis `protobuf:"bytes,7,opt,name=redis,proto3" json:"redis,omitempty"`
	// RabbitMQ is the RabbitMQ configuration of a shadow service
	RabbitMq *RabbitMQ `protobuf:"bytes,8,opt,name=rabbitMq,proto3" json:"rabbitMq,omitempty"`
	// ElasticSearch is the ElasticSearch configuration of a shadow service
	ElasticSearch        *ElasticSearch `protobuf:"bytes,9,opt,name=elasticSearch,proto3" json:"elasticSearch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ShadowService) Reset()         { *m = ShadowService{} }
func (m *ShadowService) String() string { return proto.CompactTextString(m) }
func (*ShadowService) ProtoMessage()    {}
func (*ShadowService) Descriptor() ([]byte, []int) {
	return fileDescriptor_27fb7b9523b947ad, []int{32}
}

func (m *ShadowService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShadowService.Unmarshal(m, b)
}
func (m *ShadowService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShadowService.Marshal(b, m, deterministic)
}
func (m *ShadowService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShadowService.Merge(m, src)
}
func (m *ShadowService) XXX_Size() int {
	return xxx_messageInfo_ShadowService.Size(m)
}
func (m *ShadowService) XXX_DiscardUnknown() {
	xxx_messageInfo_ShadowService.DiscardUnknown(m)
}

var xxx_messageInfo_ShadowService proto.InternalMessageInfo

func (m *ShadowService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShadowService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ShadowService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ShadowService) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ShadowService) GetMysql() *MySQL {
	if m != nil {
		return m.Mysql
	}
	return nil
}

func (m *ShadowService) GetKafka() *Kafka {
	if m != nil {
		return m.Kafka
	}
	return nil
}

func (m *ShadowService) GetRedis() *Redis {
	if m != nil {
		return m.Redis
	}
	return nil
}

func (m *ShadowService) GetRabbitMq() *RabbitMQ {
	if m != nil {
		return m.RabbitMq
	}
	return nil
}

func (m *ShadowService) GetElasticSearch() *ElasticSearch {
	if m != nil {
		return m.ElasticSearch
	}
	return nil
}

func init() {
	proto.RegisterType((*Tenant)(nil), "easemesh.v1alpha1.Tenant")
	proto.RegisterType((*Service)(nil), "easemesh.v1alpha1.Service")
	proto.RegisterType((*Resilience)(nil), "easemesh.v1alpha1.Resilience")
	proto.RegisterType((*Canary)(nil), "easemesh.v1alpha1.Canary")
	proto.RegisterType((*Sidecar)(nil), "easemesh.v1alpha1.Sidecar")
	proto.RegisterType((*LoadBalance)(nil), "easemesh.v1alpha1.LoadBalance")
	proto.RegisterType((*Observability)(nil), "easemesh.v1alpha1.Observability")
	proto.RegisterType((*Ingress)(nil), "easemesh.v1alpha1.Ingress")
	proto.RegisterType((*ServiceInstance)(nil), "easemesh.v1alpha1.ServiceInstance")
	proto.RegisterMapType((map[string]string)(nil), "easemesh.v1alpha1.ServiceInstance.LabelsEntry")
	proto.RegisterType((*RateLimiter)(nil), "easemesh.v1alpha1.RateLimiter")
	proto.RegisterType((*CircuitBreaker)(nil), "easemesh.v1alpha1.CircuitBreaker")
	proto.RegisterType((*Retryer)(nil), "easemesh.v1alpha1.Retryer")
	proto.RegisterType((*TimeLimiter)(nil), "easemesh.v1alpha1.TimeLimiter")
	proto.RegisterType((*CircuitBreakerPolicy)(nil), "easemesh.v1alpha1.CircuitBreakerPolicy")
	proto.RegisterType((*RetryerPolicy)(nil), "easemesh.v1alpha1.RetryerPolicy")
	proto.RegisterType((*RateLimiterPolicy)(nil), "easemesh.v1alpha1.RateLimiterPolicy")
	proto.RegisterType((*CanaryRule)(nil), "easemesh.v1alpha1.CanaryRule")
	proto.RegisterMapType((map[string]*StringMatch)(nil), "easemesh.v1alpha1.CanaryRule.HeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "easemesh.v1alpha1.CanaryRule.ServiceInstanceLabelsEntry")
	proto.RegisterType((*ObservabilityOutputServer)(nil), "easemesh.v1alpha1.ObservabilityOutputServer")
	proto.RegisterType((*ObservabilityTracingsDetail)(nil), "easemesh.v1alpha1.ObservabilityTracingsDetail")
	proto.RegisterType((*ObservabilityTracingsOutputConfig)(nil), "easemesh.v1alpha1.ObservabilityTracingsOutputConfig")
	proto.RegisterType((*ObservabilityTracings)(nil), "easemesh.v1alpha1.ObservabilityTracings")
	proto.RegisterType((*ObservabilityMetricsDetail)(nil), "easemesh.v1alpha1.ObservabilityMetricsDetail")
	proto.RegisterType((*ObservabilityMetrics)(nil), "easemesh.v1alpha1.ObservabilityMetrics")
	proto.RegisterType((*IngressPath)(nil), "easemesh.v1alpha1.IngressPath")
	proto.RegisterType((*IngressRule)(nil), "easemesh.v1alpha1.IngressRule")
	proto.RegisterType((*StringMatch)(nil), "easemesh.v1alpha1.StringMatch")
	proto.RegisterType((*URLRule)(nil), "easemesh.v1alpha1.URLRule")
	proto.RegisterType((*MySQL)(nil), "easemesh.v1alpha1.MySQL")
	proto.RegisterType((*Kafka)(nil), "easemesh.v1alpha1.Kafka")
	proto.RegisterType((*Redis)(nil), "easemesh.v1alpha1.Redis")
	proto.RegisterType((*RabbitMQ)(nil), "easemesh.v1alpha1.RabbitMQ")
	proto.RegisterType((*ElasticSearch)(nil), "easemesh.v1alpha1.ElasticSearch")
	proto.RegisterType((*ShadowService)(nil), "easemesh.v1alpha1.ShadowService")
}

func init() { proto.RegisterFile("meshmodel.proto", fileDescriptor_27fb7b9523b947ad) }

var fileDescriptor_27fb7b9523b947ad = []byte{
	// 2120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4f, 0x73, 0x1b, 0xb7,
	0x15, 0x1f, 0x92, 0x22, 0x29, 0x3e, 0x9a, 0x72, 0x8c, 0xda, 0x09, 0x4d, 0xa7, 0x1e, 0x65, 0xc7,
	0x6d, 0x34, 0x99, 0x94, 0x89, 0x5d, 0xb5, 0x75, 0x3b, 0xe9, 0x34, 0x11, 0x65, 0x45, 0x1a, 0x4b,
	0x96, 0x0c, 0x2a, 0xf5, 0x8c, 0x3b, 0x3d, 0x80, 0xbb, 0x20, 0x09, 0x6b, 0xff, 0x19, 0xc0, 0x4a,
	0x62, 0xbe, 0x45, 0x4f, 0xed, 0xa9, 0x97, 0xb6, 0x87, 0xb6, 0xa7, 0x5e, 0xfa, 0x55, 0x7a, 0xea,
	0x17, 0xe8, 0x17, 0xe8, 0x35, 0x83, 0x3f, 0x4b, 0xee, 0x52, 0x4b, 0x49, 0xd4, 0x78, 0x72, 0x5b,
	0x3c, 0xbc, 0xdf, 0x03, 0xf0, 0xde, 0x0f, 0x0f, 0x0f, 0x58, 0xb8, 0x1d, 0x50, 0x31, 0x0e, 0x22,
	0x8f, 0xfa, 0xdd, 0x98, 0x47, 0x32, 0x42, 0x77, 0x28, 0x11, 0x54, 0x09, 0xbb, 0xa7, 0x8f, 0x89,
	0x1f, 0x8f, 0xc9, 0x63, 0xe7, 0x35, 0xd4, 0x8e, 0x69, 0x48, 0x42, 0x89, 0x10, 0xac, 0x84, 0x24,
	0xa0, 0xed, 0xd2, 0x7a, 0x69, 0xa3, 0x81, 0xf5, 0x37, 0xea, 0xc0, 0xaa, 0xa0, 0xfc, 0x94, 0xb9,
	0x54, 0xb4, 0xcb, 0xeb, 0x95, 0x8d, 0x06, 0x9e, 0xb6, 0xd1, 0x3a, 0x34, 0x3d, 0x2a, 0x5c, 0xce,
	0x62, 0xc9, 0xa2, 0xb0, 0x5d, 0xd1, 0xb0, 0xac, 0xc8, 0xf9, 0x7f, 0x19, 0xea, 0x7d, 0xa3, 0x5e,
	0x68, 0xfd, 0xc7, 0xb0, 0xc6, 0xe9, 0x88, 0x09, 0x49, 0xb9, 0x99, 0x43, 0xbb, 0xac, 0x7b, 0xe7,
	0xa4, 0xe8, 0xd7, 0x00, 0x9c, 0x0a, 0xe6, 0x33, 0x1a, 0xba, 0x54, 0x0f, 0xd4, 0x7c, 0xf2, 0xc3,
	0xee, 0x85, 0xb5, 0x74, 0xf1, 0x54, 0x09, 0x67, 0x00, 0xe8, 0x31, 0xd4, 0x5c, 0x12, 0x12, 0x3e,
	0x69, 0xaf, 0x68, 0xe8, 0xfd, 0x02, 0x68, 0x4f, 0x2b, 0x60, 0xab, 0x88, 0xbe, 0x84, 0xa6, 0x1f,
	0x11, 0x6f, 0x8b, 0xf8, 0x44, 0x0d, 0x59, 0xd5, 0xb8, 0x87, 0x05, 0xb8, 0xfd, 0x99, 0x16, 0xce,
	0x42, 0xd0, 0x26, 0xd4, 0x05, 0xf3, 0xa8, 0x4b, 0x78, 0xbb, 0xa6, 0xd1, 0x9d, 0x02, 0x74, 0xdf,
	0x68, 0xe0, 0x54, 0x15, 0xed, 0x40, 0x2b, 0x1a, 0x28, 0x0f, 0x93, 0x01, 0xf3, 0x99, 0x9c, 0xb4,
	0xeb, 0x1a, 0xbb, 0x5e, 0x80, 0x3d, 0xcc, 0xea, 0xe1, 0x3c, 0xcc, 0xf9, 0x43, 0x19, 0x60, 0xe6,
	0x0d, 0xb5, 0x1c, 0x4e, 0x24, 0xdd, 0x67, 0x01, 0x93, 0x94, 0xeb, 0x18, 0x14, 0x2f, 0x07, 0xcf,
	0xb4, 0x70, 0x16, 0x82, 0xf6, 0x60, 0xcd, 0x65, 0xdc, 0x4d, 0x98, 0xdc, 0xe2, 0x94, 0x9c, 0x50,
	0xae, 0x43, 0xd5, 0x7c, 0xf2, 0x51, 0x91, 0x2f, 0x73, 0x8a, 0x78, 0x0e, 0xa8, 0x3c, 0xc3, 0xa9,
	0xe4, 0x13, 0xca, 0x6d, 0x28, 0x3b, 0x85, 0xa1, 0xd4, 0x1a, 0x38, 0x55, 0x55, 0x4b, 0x90, 0x2c,
	0x98, 0x2e, 0x61, 0x65, 0xe1, 0x12, 0x8e, 0x67, 0x5a, 0x38, 0x0b, 0x71, 0xf6, 0xa0, 0x66, 0xa2,
	0x8c, 0x7e, 0x03, 0x4d, 0x13, 0x67, 0x9c, 0xf8, 0x54, 0xb4, 0x4b, 0xeb, 0x95, 0x05, 0x84, 0xea,
	0x4d, 0xb5, 0x70, 0x16, 0xe1, 0xfc, 0xb7, 0x04, 0x75, 0x1b, 0x3b, 0xf4, 0x08, 0x5a, 0x1e, 0x13,
	0x6e, 0x74, 0x4a, 0xf9, 0xe4, 0x78, 0x12, 0xa7, 0x0c, 0xcf, 0x0b, 0x51, 0x1b, 0xea, 0xc4, 0xf3,
	0x38, 0x15, 0xc2, 0x72, 0x3c, 0x6d, 0xaa, 0x6d, 0xc4, 0xc2, 0x91, 0xfa, 0x3c, 0x8a, 0xb8, 0xd4,
	0x2e, 0xa9, 0xe2, 0xac, 0x08, 0x6d, 0xc0, 0xed, 0xb4, 0xa9, 0x76, 0xb1, 0x1b, 0xf9, 0x7a, 0xf9,
	0x0d, 0x3c, 0x2f, 0x46, 0x0f, 0x01, 0xe8, 0xcc, 0x54, 0x55, 0x9b, 0xca, 0x48, 0xd4, 0x86, 0xa3,
	0x79, 0x43, 0x35, 0xb3, 0xe1, 0xf2, 0x52, 0xe7, 0x39, 0x34, 0x33, 0xc4, 0x46, 0xef, 0x43, 0x2d,
	0x8e, 0x7c, 0xe6, 0x4e, 0xec, 0xda, 0x6c, 0x4b, 0x2d, 0x7d, 0x4c, 0x89, 0x47, 0xf9, 0x2e, 0x11,
	0xe3, 0xe7, 0x74, 0x62, 0x97, 0x96, 0x17, 0x3a, 0xff, 0x2b, 0x41, 0x2b, 0x47, 0x56, 0x74, 0x04,
	0xb7, 0xa2, 0x44, 0xc6, 0x89, 0x54, 0xc9, 0x61, 0xca, 0xc7, 0x4f, 0xaf, 0x22, 0xf9, 0x61, 0x06,
	0x83, 0x73, 0x16, 0xd0, 0x36, 0xac, 0x4a, 0x4e, 0x5c, 0x16, 0x8e, 0x84, 0x25, 0xe6, 0xc6, 0x55,
	0xd6, 0x8e, 0xad, 0x3e, 0x9e, 0x22, 0xd1, 0x57, 0x50, 0x0f, 0xa8, 0xe4, 0xcc, 0x15, 0x96, 0x99,
	0x1f, 0x5f, 0x65, 0xe4, 0xc0, 0xa8, 0xe3, 0x14, 0xe7, 0xf4, 0xa1, 0xbe, 0x67, 0x82, 0x52, 0x98,
	0xf1, 0x36, 0xa1, 0xca, 0x35, 0xe7, 0xca, 0x9a, 0x73, 0x45, 0xfc, 0xb5, 0x70, 0x4d, 0x3a, 0xa3,
	0xec, 0xfc, 0xbb, 0x0c, 0xb7, 0x6d, 0x1e, 0xdd, 0x0b, 0x85, 0xd4, 0x31, 0x59, 0x87, 0xa6, 0xcd,
	0xc4, 0x2f, 0x66, 0x83, 0x64, 0x45, 0x8a, 0x0c, 0xcc, 0x6a, 0xef, 0x6d, 0xdb, 0xd0, 0x64, 0x24,
	0x68, 0x0d, 0xca, 0x2c, 0xb6, 0x69, 0xbb, 0xcc, 0x62, 0x35, 0xdf, 0x58, 0xd1, 0x66, 0x45, 0xd3,
	0x46, 0x7f, 0x23, 0x07, 0x6e, 0x99, 0x5c, 0xcc, 0x27, 0x6a, 0x5f, 0x69, 0x4a, 0x35, 0x70, 0x4e,
	0x86, 0x76, 0xa0, 0xe6, 0x93, 0x01, 0xf5, 0x45, 0xbb, 0xa6, 0x17, 0xd5, 0x2d, 0x4a, 0x74, 0xf9,
	0xd9, 0x77, 0xf7, 0x35, 0xe0, 0x59, 0x28, 0x55, 0xce, 0x35, 0x68, 0xc5, 0x32, 0x21, 0x89, 0x4c,
	0x84, 0x4e, 0x7a, 0x0d, 0x6c, 0x5b, 0x9d, 0x5f, 0x42, 0x33, 0xa3, 0x8e, 0xde, 0x83, 0xca, 0x09,
	0x4d, 0x99, 0xa8, 0x3e, 0xd1, 0x5d, 0xa8, 0x9e, 0x12, 0x3f, 0xa1, 0x76, 0x8d, 0xa6, 0xf1, 0xab,
	0xf2, 0xd3, 0x92, 0xf3, 0xcf, 0x12, 0x34, 0x33, 0x29, 0x0d, 0x7d, 0x09, 0xab, 0x9a, 0xba, 0x6c,
	0xba, 0xeb, 0x1f, 0x5d, 0x9e, 0x04, 0x8f, 0x34, 0xd1, 0xf1, 0x14, 0x85, 0x3e, 0x81, 0xf7, 0x3c,
	0x3a, 0x24, 0x89, 0x2f, 0x6d, 0x17, 0x1d, 0xda, 0x61, 0x2f, 0xc8, 0x51, 0x17, 0x56, 0x12, 0xee,
	0x2b, 0x2e, 0x55, 0x16, 0x64, 0xb9, 0x6f, 0xf0, 0xbe, 0x8e, 0xb3, 0xd6, 0x73, 0xfe, 0x55, 0x82,
	0xb5, 0x7c, 0xee, 0x44, 0xbd, 0x0b, 0x13, 0xfe, 0xf8, 0xca, 0x84, 0xfb, 0xbd, 0xce, 0xf9, 0x2f,
	0x25, 0xa8, 0xdb, 0x5c, 0x8d, 0xbe, 0xb8, 0x30, 0xd9, 0xf5, 0xc5, 0x99, 0xfd, 0x7b, 0x9d, 0x65,
	0x02, 0xcd, 0xcc, 0xb1, 0x80, 0x7e, 0x0e, 0xef, 0x5b, 0x93, 0x4a, 0x1a, 0x25, 0x72, 0x3b, 0xe1,
	0x44, 0x17, 0x31, 0x86, 0x55, 0x0b, 0x7a, 0x97, 0x1e, 0xf6, 0xcf, 0x55, 0xb8, 0x5b, 0x14, 0x9b,
	0xc2, 0xd4, 0xf0, 0x29, 0xdc, 0x11, 0x3e, 0xf3, 0x58, 0x38, 0x7a, 0xc5, 0x42, 0x2f, 0x3a, 0xd3,
	0x67, 0x89, 0x71, 0xc0, 0xc5, 0x0e, 0xf4, 0x04, 0xee, 0x0e, 0x09, 0xf3, 0x13, 0x4e, 0x15, 0x5b,
	0x8f, 0xc7, 0x9c, 0x8a, 0x71, 0xe4, 0x7b, 0x7a, 0x3b, 0xb7, 0x70, 0x61, 0x1f, 0xda, 0x84, 0x7b,
	0xc2, 0x8f, 0xce, 0x7a, 0xc4, 0xf7, 0xf3, 0xa0, 0x15, 0x0d, 0x2a, 0xee, 0x54, 0x23, 0xb9, 0x51,
	0x12, 0x4a, 0x16, 0x8e, 0x5e, 0x50, 0x79, 0x16, 0xf1, 0x93, 0x67, 0x9c, 0x47, 0x5c, 0xa7, 0x82,
	0x55, 0x5c, 0xd8, 0x77, 0x61, 0x2d, 0x7d, 0xf6, 0x2d, 0xd5, 0x47, 0x4d, 0x0b, 0x5f, 0xec, 0x40,
	0xc7, 0xf0, 0xa3, 0x98, 0xf2, 0x80, 0x49, 0x49, 0xbd, 0x17, 0x49, 0x30, 0xa0, 0xfc, 0x70, 0xa8,
	0xe6, 0x21, 0xf6, 0xc2, 0x5d, 0xe2, 0x0f, 0x0f, 0x63, 0x1a, 0xf6, 0x25, 0x91, 0x54, 0xe7, 0x85,
	0x16, 0xbe, 0x9e, 0xb2, 0x9a, 0x77, 0xc0, 0x42, 0x16, 0x24, 0x41, 0x4e, 0xad, 0xbd, 0x6a, 0x3c,
	0x54, 0xd4, 0x87, 0xbe, 0x80, 0xfb, 0xa9, 0x13, 0xd2, 0xa0, 0xcf, 0xbc, 0xd4, 0xd0, 0xb1, 0x58,
	0xac, 0x80, 0x76, 0xe0, 0x61, 0x40, 0xce, 0x5f, 0x11, 0x36, 0x65, 0xcc, 0xfc, 0x02, 0x40, 0x9b,
	0xb8, 0x42, 0x0b, 0x3d, 0x85, 0x0f, 0xce, 0x72, 0xdd, 0x33, 0x03, 0x4d, 0x6d, 0x60, 0x51, 0x37,
	0xea, 0x02, 0xb2, 0x91, 0xef, 0xeb, 0xdc, 0xd9, 0x8b, 0x3c, 0x2a, 0xda, 0xb7, 0xd6, 0x2b, 0x1b,
	0x55, 0x5c, 0xd0, 0xe3, 0xfc, 0xad, 0x0c, 0xad, 0xdc, 0x7e, 0x2c, 0x64, 0xe6, 0x3a, 0x34, 0x03,
	0x72, 0xfe, 0x95, 0x94, 0x34, 0x88, 0xa5, 0x39, 0x5f, 0xab, 0x38, 0x2b, 0x52, 0xc7, 0x44, 0x76,
	0x4a, 0xf6, 0x50, 0xc9, 0xc9, 0x54, 0xb1, 0x30, 0x20, 0xee, 0xc9, 0xe1, 0x70, 0x68, 0x86, 0xb2,
	0x35, 0x4c, 0x5e, 0x88, 0x3e, 0x87, 0x1f, 0x70, 0x12, 0x7a, 0x51, 0xc0, 0xbe, 0xd5, 0xb0, 0x1d,
	0xe2, 0x4a, 0x4b, 0xb6, 0x12, 0x2e, 0xea, 0x5a, 0xc8, 0xcf, 0xda, 0x25, 0xfc, 0x2c, 0xf6, 0x53,
	0x7d, 0xa1, 0x9f, 0xfe, 0x5e, 0x82, 0x3b, 0x17, 0x4e, 0x85, 0x42, 0x5f, 0x6d, 0xc0, 0x6d, 0x39,
	0x97, 0x53, 0xcc, 0x1e, 0x9e, 0x17, 0xab, 0x39, 0xf8, 0xca, 0x1c, 0xa6, 0x43, 0x45, 0xa0, 0x23,
	0xca, 0x59, 0xe4, 0x59, 0xcf, 0x15, 0xf4, 0xa8, 0xda, 0x4d, 0x4b, 0x77, 0x22, 0x6e, 0x75, 0xcd,
	0x41, 0x3d, 0x27, 0x75, 0xfe, 0x54, 0x01, 0x98, 0xd5, 0xad, 0x28, 0x84, 0x7b, 0x22, 0x7f, 0xf8,
	0x9a, 0xc3, 0xd4, 0x66, 0xe8, 0xa7, 0x97, 0x56, 0xbd, 0xf3, 0xe7, 0x76, 0xf6, 0xd8, 0x2e, 0x36,
	0x8b, 0xb6, 0xa1, 0x6e, 0xca, 0xbf, 0xb4, 0xc6, 0xf9, 0xe4, 0xf2, 0x11, 0x76, 0x8d, 0xb2, 0xb1,
	0x99, 0x42, 0x97, 0xcd, 0xb4, 0x9d, 0x5d, 0xe8, 0x2c, 0x9e, 0xea, 0x32, 0x25, 0x43, 0xe7, 0x35,
	0xdc, 0xca, 0x4e, 0xa9, 0x00, 0xbb, 0x99, 0xc5, 0x16, 0xd7, 0x70, 0x7d, 0xc9, 0x59, 0x38, 0x3a,
	0x20, 0xd2, 0x1d, 0x67, 0xcb, 0x91, 0x09, 0xdc, 0x5f, 0x58, 0xd0, 0xaa, 0x1b, 0x02, 0x0d, 0xc9,
	0xc0, 0xa7, 0x9e, 0x1e, 0x6c, 0x15, 0xa7, 0x4d, 0xc5, 0xa9, 0x41, 0x14, 0x49, 0x21, 0x39, 0x89,
	0x6d, 0xc5, 0x6c, 0x39, 0x35, 0x27, 0x56, 0x36, 0x2c, 0xcd, 0xec, 0x3d, 0x22, 0x6d, 0x3a, 0xbf,
	0x87, 0x07, 0x85, 0xd5, 0xef, 0x36, 0x95, 0x84, 0xf9, 0x97, 0x0c, 0xfe, 0x08, 0x5a, 0x36, 0xd0,
	0x47, 0x9c, 0x0e, 0xd9, 0x79, 0x5a, 0xe3, 0xe7, 0x84, 0xce, 0x1f, 0xcb, 0xf0, 0x51, 0xa1, 0x7d,
	0xb3, 0xc4, 0x5e, 0x14, 0x0e, 0xd9, 0xe8, 0x92, 0x51, 0x74, 0x9d, 0xa9, 0x2a, 0x4e, 0x95, 0x4d,
	0x89, 0x67, 0x73, 0x4c, 0x4e, 0xa6, 0x62, 0x26, 0xa3, 0x98, 0xb9, 0x76, 0x8f, 0x98, 0x86, 0x72,
	0x4e, 0x40, 0x85, 0x20, 0x23, 0x7a, 0x40, 0xce, 0xb7, 0x26, 0x92, 0x0a, 0xbb, 0x2f, 0xe6, 0xc5,
	0x6a, 0x03, 0xbd, 0x4d, 0x68, 0x42, 0xbd, 0x03, 0x72, 0xde, 0x8f, 0x49, 0x28, 0xec, 0x05, 0x69,
	0x4e, 0xaa, 0x56, 0x3c, 0x93, 0xa4, 0x07, 0x57, 0x15, 0xe7, 0x85, 0xca, 0x9a, 0x1d, 0xc0, 0x56,
	0x09, 0xfa, 0x74, 0xaa, 0xe2, 0x39, 0xa9, 0xf3, 0x9f, 0x15, 0xb8, 0x57, 0xe8, 0x99, 0x4b, 0xbc,
	0xa1, 0x6a, 0x7b, 0x12, 0xc4, 0x3e, 0xdd, 0x9a, 0xbc, 0x3c, 0xea, 0xa7, 0x09, 0x37, 0x23, 0x42,
	0xfb, 0x50, 0x33, 0xf7, 0x1f, 0x7b, 0x51, 0xd9, 0xbc, 0xee, 0x6d, 0x27, 0x1b, 0x0f, 0x6c, 0x6d,
	0xa0, 0x5d, 0x75, 0x23, 0x7f, 0x9b, 0x50, 0x21, 0xed, 0xbd, 0xba, 0x7b, 0x5d, 0x73, 0x86, 0x3e,
	0x38, 0x85, 0x23, 0xac, 0xe2, 0x18, 0x44, 0x92, 0xee, 0x85, 0xa7, 0xd1, 0x49, 0xfa, 0x70, 0xb2,
	0xac, 0xb9, 0x9c, 0x0d, 0xb4, 0x0d, 0xd5, 0x13, 0x32, 0x3c, 0x21, 0xf6, 0x1d, 0x65, 0x59, 0x63,
	0x06, 0x8c, 0xb6, 0x60, 0xe5, 0x8d, 0x37, 0x70, 0xed, 0x83, 0xca, 0xb2, 0x46, 0x34, 0x56, 0xcd,
	0x84, 0x53, 0x8f, 0x99, 0x1a, 0xe2, 0x06, 0x33, 0xd1, 0x60, 0x75, 0x5f, 0xe2, 0x64, 0x30, 0x60,
	0x52, 0x57, 0x14, 0xcb, 0x9b, 0xb1, 0x68, 0x67, 0x0c, 0x9d, 0xa2, 0xbb, 0xe8, 0x95, 0x3b, 0xba,
	0x03, 0xab, 0x2c, 0x94, 0x0a, 0xe7, 0x5b, 0x6a, 0x4d, 0xdb, 0xc5, 0x7b, 0xcc, 0xf9, 0x6b, 0x0d,
	0xee, 0x16, 0x0d, 0x75, 0xc9, 0x20, 0xcf, 0xa0, 0x46, 0x5c, 0x37, 0x7d, 0xee, 0x68, 0x3e, 0xf9,
	0xc9, 0x35, 0x6f, 0xd2, 0xe9, 0x1a, 0x0d, 0x18, 0x7d, 0x3d, 0x63, 0x66, 0xe5, 0x26, 0x76, 0xa6,
	0xc4, 0xec, 0x43, 0x4b, 0x85, 0x50, 0x97, 0x49, 0x01, 0x0d, 0x53, 0xa2, 0x2f, 0x69, 0x2e, 0x6f,
	0x03, 0x7d, 0x03, 0x6b, 0x4a, 0xd0, 0x8b, 0xc2, 0x90, 0xba, 0xfa, 0xac, 0xaf, 0xde, 0xc4, 0xea,
	0x9c, 0x11, 0xe5, 0x3b, 0x4b, 0x90, 0xda, 0x8d, 0x7c, 0x67, 0xc0, 0xa8, 0x97, 0xee, 0x9b, 0xfa,
	0x4d, 0xac, 0xd8, 0x6d, 0xd3, 0xcb, 0x53, 0x7e, 0x59, 0x23, 0x86, 0xf1, 0x3d, 0xa8, 0xbe, 0x39,
	0x0d, 0xbe, 0x76, 0x2d, 0xe1, 0x97, 0x35, 0xa2, 0xb1, 0xe8, 0x39, 0x34, 0xde, 0x9c, 0x06, 0x07,
	0x34, 0x88, 0xf8, 0x44, 0x17, 0xd2, 0x4b, 0x1b, 0x9a, 0xe1, 0x15, 0x1d, 0x02, 0xef, 0x67, 0xdb,
	0x4c, 0x3b, 0x9c, 0xf0, 0x89, 0x2e, 0xac, 0x97, 0xa7, 0x43, 0xce, 0x86, 0x43, 0xa0, 0x69, 0x1f,
	0x6f, 0x8e, 0x88, 0x1c, 0xeb, 0xf7, 0x14, 0x22, 0xc7, 0x69, 0x79, 0xa8, 0xbe, 0xd5, 0xd9, 0xc2,
	0xe9, 0x19, 0x67, 0x92, 0x1e, 0x13, 0x3e, 0xa2, 0xe9, 0x83, 0x77, 0x5e, 0xa8, 0xb6, 0x95, 0xaa,
	0x8a, 0x69, 0x98, 0xd6, 0x83, 0x69, 0xd3, 0x79, 0x35, 0x1d, 0x42, 0x17, 0x77, 0x08, 0x56, 0xc6,
	0x91, 0x90, 0xe9, 0x10, 0xea, 0x5b, 0x95, 0x27, 0x6a, 0xa8, 0x6b, 0x3c, 0x31, 0xa9, 0x59, 0x62,
	0xa3, 0xec, 0xbc, 0x84, 0x66, 0xa6, 0x68, 0x51, 0x79, 0x80, 0x9e, 0x13, 0x37, 0xb5, 0x6c, 0x1a,
	0xfa, 0x1d, 0x30, 0x5b, 0x04, 0xd8, 0x96, 0xd2, 0xe6, 0x74, 0x44, 0xcf, 0xd3, 0xac, 0xa1, 0x1b,
	0x8e, 0x80, 0xba, 0x2d, 0xd2, 0xd4, 0x82, 0x02, 0x2a, 0xc7, 0x91, 0x67, 0xca, 0xce, 0x06, 0x4e,
	0x9b, 0xe8, 0x73, 0xa8, 0x24, 0xdc, 0xbf, 0x66, 0x29, 0xa5, 0x54, 0xd1, 0x87, 0xd0, 0x88, 0xa7,
	0x0f, 0x04, 0x66, 0xc0, 0x99, 0xc0, 0xe9, 0x43, 0xf5, 0x60, 0xd2, 0x7f, 0xb9, 0xaf, 0x5c, 0x93,
	0x70, 0x96, 0x8e, 0xa7, 0xbf, 0x55, 0xe6, 0x4b, 0x04, 0xe5, 0xfa, 0xc1, 0xcc, 0xac, 0x60, 0xda,
	0x56, 0x7d, 0x31, 0x11, 0xe2, 0x2c, 0xe2, 0xa9, 0xd3, 0xa7, 0x6d, 0xe7, 0x01, 0x54, 0x9f, 0xeb,
	0xdd, 0x50, 0x60, 0x54, 0x8d, 0x88, 0x35, 0xcb, 0xdf, 0xe5, 0x88, 0xbf, 0x85, 0x55, 0xac, 0x77,
	0xf1, 0xc1, 0xcb, 0x77, 0x6a, 0xf7, 0x77, 0xd0, 0x7a, 0xe6, 0x13, 0x21, 0x99, 0xdb, 0xa7, 0x84,
	0xbb, 0xe3, 0x77, 0x6a, 0xfc, 0x1f, 0x15, 0x68, 0xf5, 0xc7, 0x44, 0x5d, 0xeb, 0x2f, 0xf9, 0xe9,
	0x33, 0xf7, 0x70, 0x59, 0xbe, 0xf8, 0x70, 0xf9, 0x21, 0x34, 0x94, 0xa6, 0x88, 0x89, 0xfd, 0xdb,
	0xd3, 0xc0, 0x33, 0x81, 0xfe, 0xb1, 0x62, 0x94, 0x6d, 0x0e, 0xef, 0x2c, 0x7e, 0x6f, 0xc4, 0xa9,
	0x2a, 0xea, 0x42, 0x35, 0x98, 0x88, 0xb7, 0xbe, 0xcd, 0xd0, 0xed, 0x02, 0x8c, 0xe6, 0x0d, 0x36,
	0x6a, 0x4a, 0x3f, 0x5b, 0x74, 0x14, 0xe9, 0x6b, 0x4a, 0xa4, 0x79, 0xb2, 0x9b, 0xe6, 0xc9, 0xfa,
	0x42, 0x7d, 0xcd, 0x92, 0x34, 0x25, 0xfe, 0x02, 0x56, 0x4d, 0x9a, 0x3e, 0x78, 0x6b, 0x53, 0xeb,
	0x83, 0xc2, 0x97, 0x48, 0xc3, 0x01, 0x3c, 0x55, 0x46, 0x3b, 0xd0, 0xa2, 0xd9, 0x08, 0xda, 0x9c,
	0x5a, 0xf4, 0xd2, 0x96, 0x8b, 0x34, 0xce, 0xc3, 0xb6, 0x3e, 0x78, 0x7d, 0x2f, 0x45, 0x7c, 0x46,
	0x62, 0xf6, 0x59, 0x8a, 0x1a, 0xd4, 0xf4, 0xaf, 0xc2, 0x9f, 0x7e, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x07, 0xc1, 0x33, 0x90, 0x3d, 0x1c, 0x00, 0x00,
}
